<?php

/**
 * @file
 * Movie custom module file.
 */


use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityInterface;




//hook prerender attached the libraies 

/**
* Implements hook_preprocess_page().
*/
function movie_custom_preprocess_page(&$variables) { 
    // dump($variables);
    $variables['#attached']['library'][] = 'movie_custom/movie_custom';
}



/* implement hook
*/
 
function moviecustom_theme_suggestions_html_alter(array &$suggestions, array $variables) {
	
	 if ($node = \Drupal::routeMatch()->getParameter('node')) {
	     $suggestions[] = 'html__' . $node->bundle();
	 }
	
}


    // The 'success' batch process

function delete_nodes_example($nids, &$context){
  $message = 'Deleting ALL Nodes ...';
  $results = array();
  foreach ($nids as $nid) {
      $node = Node::load($nid);
      $results[] = $node->delete();
  }
  $context['message'] = $message;
  $context['results'] = $results;
}


    // The 'success' batch process
function delete_nodes_finished($success, $results, $operations) {
    // The 'success' parameter means no fatal PHP errors were detected. All
    // other error management should be handled using 'results'.
    if ($success) {
        $message = \Drupal::translation()->formatPlural(
            count($results),
            'One post processed.', '@count posts processed.'
        );
    }
    else {
        $message = t('Finished with an error.');
    }
    \Drupal::messenger()->addStatus($message);
}



/**
 *
 */
function movie_custom_theme() {
  return [
    'weather' => [
      'variables' => [
        'data' => [],
        'url' => '',
        'secret' => NULL,
      ],
    ],
  ];
}


// function movie_custom_preprocess_html(&$variables) {
  
//   if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
//     $variables['term_id'] = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
//   }
// 	$current_path = \Drupal::service('path.current')->getPath();
// 	$current_path_array = explode('/',$current_path);
// 	if ($current_path_array[1] == 'user' && is_numeric($current_path_array[2])) {
// 		$variables['attributes']['class'][] = 'usr-prfl';
// 	}
// 	if ($current_path_array[1] == 'user' && is_numeric($current_path_array[2]) && (isset($current_path_array[3]) && $current_path_array[3] == 'edit')) {
// 		$variables['attributes']['class'][] = 'usr-prfl-edit';
// 	}

// }


/**
 * Implements hook_user_login().
 */
// function movie_custom_user_login($account) {
//   // Instantiate our event.
//   $event = new UserLoginEvent($account);

//   $event_dispatcher = \Drupal::service('event_dispatcher');
//   $event_dispatcher->dispatch(UserLoginEvent::EVENT_NAME, $event);
// }


/**
 * Implements hook_form_FORM_ID_alter().
 */
// function movie_custom_form_user_login_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
//   // Add a custom submit button to the login form.
//   $form['third_party_login'] = [
//     '#type' => 'submit',
//     '#value' => t('Login with Third-Party Provider'),
//     '#submit' => ['hook_examples_user_login_form_submit'], // Call the custom submit function.
//   ];
// }


	
/**
 * Implements movie_custom_cron().
 */
function movie_custom_cron() {
  //Load only node id values 
  $query = \Drupal::entityQuery('node');
  $query->condition('status',1);
  $query->condition('type', 'article');
  $entity_ids = $query->execute();

  //Get all the properties of node value 
  $query2 = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
    'type' => 'movies',
    'status' => 0,
  ]);

  // $entities = \Drupal::entityTypeManager()
  // ->getStorage('node')
  // ->loadByProperties([
  //     'type' => 'article',
  //     'uid' => [uid1, uid2, uid3],
  //   ]);
   $i =0;
  foreach ($entity_ids as $entity_id) {
    $node = Node::load($entity_id);
    $node->setUnPublished(); // setUnPublished()
    //$node->setPublished(); // setPublished() //
    $node->save();
    $i++;
  }
    if($i!=0){
      $data['email'] = "suresh@mailinator.com";
      $data['subject'] = "custom crom";
      $data['message'] = "Custom cron running";
      $queue = \Drupal::queue('email_queue');
      $queue->createQueue();
      $queue->createItem($data);
    } 
   
 
}


/**
 * Implements hook_mail().
 */
function movie_custom_mail($key, &$message, $params) {
  switch ($key) {
    // Send a simple message from the contact form.
    case 'email_queue':
      $message['subject'] = SafeMarkup::checkPlain($params['subject']);
      $message['body'][] = SafeMarkup::checkPlain($params['message']);
      break;
  }
}
